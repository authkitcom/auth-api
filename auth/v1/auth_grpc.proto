// GENERATED BY go:generate. DO NOT EDIT.

syntax = "proto3";
package auth.v1;

import "google/api/annotations.proto";
import "auth/v1/auth.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "AuthKit API";
		version: "0.1";
		contact: {
			name: "AuthKit Support";
			url: "https://support.authkit.com";
			email: "support@authkit.com";
		};
	};
	security_definitions: {
		security: {
			key: "OAuth2";
			value: {
				type: TYPE_OAUTH2;
				flow: FLOW_ACCESS_CODE;
				authorization_url: "{{ .IDPIssuer }}/authorize";
				token_url: "{{ .IDPIssuer }}/oauth/token";
				scopes: {
					scope: {
						key: "authkit.com/auth:all";
						value: "All API access";
					}
				}
			}
		}
	}
	security: {
		security_requirement: {
			key: "OAuth2";
			value: {
				scope: "authkit.com/auth:all";
			}
		}
	}
};

service AuthKitAuthService {
  
  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse) {
    option (google.api.http) = { get: "/v1/tenants" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/users/{user}" };
  }

  
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/users" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/{tenant_scope}/users"
      body: "user"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/users/{user.id}"
      body: "user"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = { delete: "/v1/{tenant_scope}/users/{id}" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetUserDatabase(GetUserDatabaseRequest) returns (GetUserDatabaseResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/user_databases/{user_database}" };
  }

  
  rpc ListUserDatabases(ListUserDatabasesRequest) returns (ListUserDatabasesResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/user_databases" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateUserDatabase(CreateUserDatabaseRequest) returns (CreateUserDatabaseResponse) {
    option (google.api.http) = {
      post: "/v1/{tenant_scope}/user_databases"
      body: "user_database"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc UpdateUserDatabase(UpdateUserDatabaseRequest) returns (UpdateUserDatabaseResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/user_databases/{user_database.id}"
      body: "user_database"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc DeleteUserDatabase(DeleteUserDatabaseRequest) returns (DeleteUserDatabaseResponse) {
    option (google.api.http) = { delete: "/v1/{tenant_scope}/user_databases/{id}" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc UpdateUserDatabaseConfig(UpdateUserDatabaseConfigRequest) returns (UpdateUserDatabaseConfigResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/user_databases/{id}/config"
      body: "config"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetProvider(GetProviderRequest) returns (GetProviderResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/providers/{provider}" };
  }

  
  rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/providers" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateProvider(CreateProviderRequest) returns (CreateProviderResponse) {
    option (google.api.http) = {
      post: "/v1/{tenant_scope}/providers"
      body: "provider"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc UpdateProvider(UpdateProviderRequest) returns (UpdateProviderResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/providers/{provider.id}"
      body: "provider"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc DeleteProvider(DeleteProviderRequest) returns (DeleteProviderResponse) {
    option (google.api.http) = { delete: "/v1/{tenant_scope}/providers/{id}" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc UpdateProviderConfig(UpdateProviderConfigRequest) returns (UpdateProviderConfigResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/providers/{id}/config"
      body: "config"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetRealm(GetRealmRequest) returns (GetRealmResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/realms/{realm}" };
  }

  
  rpc ListRealms(ListRealmsRequest) returns (ListRealmsResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/realms" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateRealm(CreateRealmRequest) returns (CreateRealmResponse) {
    option (google.api.http) = {
      post: "/v1/{tenant_scope}/realms"
      body: "realm"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc UpdateRealm(UpdateRealmRequest) returns (UpdateRealmResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/realms/{realm.id}"
      body: "realm"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc DeleteRealm(DeleteRealmRequest) returns (DeleteRealmResponse) {
    option (google.api.http) = { delete: "/v1/{tenant_scope}/realms/{id}" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetClient(GetClientRequest) returns (GetClientResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/{realm_scope}/clients/{client}" };
  }

  
  rpc ListClients(ListClientsRequest) returns (ListClientsResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/{realm_scope}/clients" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc ListProvidersByClient (ListProvidersByClientRequest) returns (ListProvidersByClientResponse) {
    option (google.api.http) = {
	  get: "/v1/{tenant_scope}/{realm_scope}/clients/{client}/providers"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
		
  
  rpc AssociateProvidersToClient (AssociateProvidersToClientRequest) returns (AssociateProvidersToClientResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/{realm_scope}/clients/{client}/providers"
      body: "provider"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc ListRolesByClient (ListRolesByClientRequest) returns (ListRolesByClientResponse) {
    option (google.api.http) = {
	  get: "/v1/{tenant_scope}/{realm_scope}/clients/{client}/roles"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
		
  
  rpc AssociateRolesToClient (AssociateRolesToClientRequest) returns (AssociateRolesToClientResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/{realm_scope}/clients/{client}/roles"
      body: "role"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateClient(CreateClientRequest) returns (CreateClientResponse) {
    option (google.api.http) = {
      post: "/v1/{tenant_scope}/{realm_scope}/clients"
      body: "client"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc UpdateClient(UpdateClientRequest) returns (UpdateClientResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/{realm_scope}/clients/{client.id}"
      body: "client"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc DeleteClient(DeleteClientRequest) returns (DeleteClientResponse) {
    option (google.api.http) = { delete: "/v1/{tenant_scope}/{realm_scope}/clients/{id}" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc UpdateClientConfig(UpdateClientConfigRequest) returns (UpdateClientConfigResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/{realm_scope}/clients/{id}/config"
      body: "config"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetRole(GetRoleRequest) returns (GetRoleResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/{realm_scope}/roles/{role}" };
  }

  
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/{realm_scope}/roles" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc ListPermissionsByRole (ListPermissionsByRoleRequest) returns (ListPermissionsByRoleResponse) {
    option (google.api.http) = {
	  get: "/v1/{tenant_scope}/{realm_scope}/roles/{role}/permissions"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
		
  
  rpc AssociatePermissionsToRole (AssociatePermissionsToRoleRequest) returns (AssociatePermissionsToRoleResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/{realm_scope}/roles/{role}/permissions"
      body: "permission"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
    option (google.api.http) = {
      post: "/v1/{tenant_scope}/{realm_scope}/roles"
      body: "role"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/{realm_scope}/roles/{role.id}"
      body: "role"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {
    option (google.api.http) = { delete: "/v1/{tenant_scope}/{realm_scope}/roles/{id}" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/{realm_scope}/permissions/{permission}" };
  }

  
  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/{realm_scope}/permissions" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreatePermission(CreatePermissionRequest) returns (CreatePermissionResponse) {
    option (google.api.http) = {
      post: "/v1/{tenant_scope}/{realm_scope}/permissions"
      body: "permission"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc UpdatePermission(UpdatePermissionRequest) returns (UpdatePermissionResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/{realm_scope}/permissions/{permission.id}"
      body: "permission"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse) {
    option (google.api.http) = { delete: "/v1/{tenant_scope}/{realm_scope}/permissions/{id}" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetScope(GetScopeRequest) returns (GetScopeResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/{realm_scope}/scopes/{scope}" };
  }

  
  rpc ListScopes(ListScopesRequest) returns (ListScopesResponse) {
    option (google.api.http) = { get: "/v1/{tenant_scope}/{realm_scope}/scopes" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc ListPermissionsByScope (ListPermissionsByScopeRequest) returns (ListPermissionsByScopeResponse) {
    option (google.api.http) = {
	  get: "/v1/{tenant_scope}/{realm_scope}/scopes/{scope}/permissions"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
		
  
  rpc AssociatePermissionsToScope (AssociatePermissionsToScopeRequest) returns (AssociatePermissionsToScopeResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/{realm_scope}/scopes/{scope}/permissions"
      body: "permission"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateScope(CreateScopeRequest) returns (CreateScopeResponse) {
    option (google.api.http) = {
      post: "/v1/{tenant_scope}/{realm_scope}/scopes"
      body: "scope"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc UpdateScope(UpdateScopeRequest) returns (UpdateScopeResponse) {
    option (google.api.http) = {
      put: "/v1/{tenant_scope}/{realm_scope}/scopes/{scope.id}"
      body: "scope"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  rpc DeleteScope(DeleteScopeRequest) returns (DeleteScopeResponse) {
    option (google.api.http) = { delete: "/v1/{tenant_scope}/{realm_scope}/scopes/{id}" };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

}
  
message ListTenantsRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
}

message ListTenantsResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Tenant list = 2;
}

  
message GetUserRequest {
  string user = 1;
  string tenant_scope = 2;
}

message GetUserResponse {
  auth.v1.User user = 1;
}

  
message ListUsersRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string tenant_scope = 3;
}

message ListUsersResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.User list = 2;
}

  
message CreateUserRequest {
  auth.v1.User user = 1;
  string tenant_scope = 2;
}

message CreateUserResponse {
  auth.v1.User user = 1;
}

message UpdateUserRequest {
  auth.v1.User user = 1;
  string tenant_scope = 3;
}

message UpdateUserResponse {
  auth.v1.User user = 1;
}

message DeleteUserRequest {
  string id = 1;
  string tenant_scope = 2;
}

message DeleteUserResponse {
}


  
message GetUserDatabaseRequest {
  string user_database = 1;
  string tenant_scope = 2;
}

message GetUserDatabaseResponse {
  auth.v1.UserDatabase user_database = 1;
}

  
message ListUserDatabasesRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string tenant_scope = 3;
}

message ListUserDatabasesResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.UserDatabase list = 2;
}

  
message CreateUserDatabaseRequest {
  auth.v1.UserDatabase user_database = 1;
  string tenant_scope = 2;
}

message CreateUserDatabaseResponse {
  auth.v1.UserDatabase user_database = 1;
}

message UpdateUserDatabaseRequest {
  auth.v1.UserDatabase user_database = 1;
  string tenant_scope = 3;
}

message UpdateUserDatabaseResponse {
  auth.v1.UserDatabase user_database = 1;
}

message DeleteUserDatabaseRequest {
  string id = 1;
  string tenant_scope = 2;
}

message DeleteUserDatabaseResponse {
}


  
message UpdateUserDatabaseConfigRequest {
  UpdateUserDatabaseConfig config = 1;
  string id = 2;
  string tenant_scope = 3;
}

message UpdateUserDatabaseConfig {
  google.protobuf.Struct set = 1;
  repeated string remove = 2;
}

message UpdateUserDatabaseConfigResponse {
}

  
message GetProviderRequest {
  string provider = 1;
  string tenant_scope = 2;
}

message GetProviderResponse {
  auth.v1.Provider provider = 1;
}

  
message ListProvidersRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string tenant_scope = 3;
}

message ListProvidersResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Provider list = 2;
}

  
message CreateProviderRequest {
  auth.v1.Provider provider = 1;
  string tenant_scope = 2;
}

message CreateProviderResponse {
  auth.v1.Provider provider = 1;
}

message UpdateProviderRequest {
  auth.v1.Provider provider = 1;
  string tenant_scope = 3;
}

message UpdateProviderResponse {
  auth.v1.Provider provider = 1;
}

message DeleteProviderRequest {
  string id = 1;
  string tenant_scope = 2;
}

message DeleteProviderResponse {
}


  
message UpdateProviderConfigRequest {
  UpdateProviderConfig config = 1;
  string id = 2;
  string tenant_scope = 3;
}

message UpdateProviderConfig {
  google.protobuf.Struct set = 1;
  repeated string remove = 2;
}

message UpdateProviderConfigResponse {
}

  
message GetRealmRequest {
  string realm = 1;
  string tenant_scope = 2;
}

message GetRealmResponse {
  auth.v1.Realm realm = 1;
}

  
message ListRealmsRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string tenant_scope = 3;
}

message ListRealmsResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Realm list = 2;
}

  
message CreateRealmRequest {
  auth.v1.Realm realm = 1;
  string tenant_scope = 2;
}

message CreateRealmResponse {
  auth.v1.Realm realm = 1;
}

message UpdateRealmRequest {
  auth.v1.Realm realm = 1;
  string tenant_scope = 3;
}

message UpdateRealmResponse {
  auth.v1.Realm realm = 1;
}

message DeleteRealmRequest {
  string id = 1;
  string tenant_scope = 2;
}

message DeleteRealmResponse {
}


  
message GetClientRequest {
  string client = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message GetClientResponse {
  auth.v1.Client client = 1;
}

  
message ListClientsRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message ListClientsResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Client list = 2;
}

  
message ListProvidersByClientRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string client = 3;
  string tenant_scope = 4;
  string realm_scope = 5;
}

message ListProvidersByClientResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Provider list = 2;
}
		
  
message AssociateProvidersToClientRequest {
  ClientProviderAssociation provider = 1;
  string client = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message AssociateProvidersToClientResponse {
}

message ClientProviderAssociation {
  repeated string set = 1;
  repeated string remove = 2;
}

  
message ListRolesByClientRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string client = 3;
  string tenant_scope = 4;
  string realm_scope = 5;
}

message ListRolesByClientResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Role list = 2;
}
		
  
message AssociateRolesToClientRequest {
  ClientRoleAssociation role = 1;
  string client = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message AssociateRolesToClientResponse {
}

message ClientRoleAssociation {
  repeated string set = 1;
  repeated string remove = 2;
}

  
message CreateClientRequest {
  auth.v1.Client client = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message CreateClientResponse {
  auth.v1.Client client = 1;
}

message UpdateClientRequest {
  auth.v1.Client client = 1;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message UpdateClientResponse {
  auth.v1.Client client = 1;
}

message DeleteClientRequest {
  string id = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message DeleteClientResponse {
}


  
message UpdateClientConfigRequest {
  UpdateClientConfig config = 1;
  string id = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message UpdateClientConfig {
  google.protobuf.Struct set = 1;
  repeated string remove = 2;
}

message UpdateClientConfigResponse {
}

  
message GetRoleRequest {
  string role = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message GetRoleResponse {
  auth.v1.Role role = 1;
}

  
message ListRolesRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message ListRolesResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Role list = 2;
}

  
message ListPermissionsByRoleRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string role = 3;
  string tenant_scope = 4;
  string realm_scope = 5;
}

message ListPermissionsByRoleResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Permission list = 2;
}
		
  
message AssociatePermissionsToRoleRequest {
  RolePermissionAssociation permission = 1;
  string role = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message AssociatePermissionsToRoleResponse {
}

message RolePermissionAssociation {
  repeated string set = 1;
  repeated string remove = 2;
}

  
message CreateRoleRequest {
  auth.v1.Role role = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message CreateRoleResponse {
  auth.v1.Role role = 1;
}

message UpdateRoleRequest {
  auth.v1.Role role = 1;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message UpdateRoleResponse {
  auth.v1.Role role = 1;
}

message DeleteRoleRequest {
  string id = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message DeleteRoleResponse {
}


  
message GetPermissionRequest {
  string permission = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message GetPermissionResponse {
  auth.v1.Permission permission = 1;
}

  
message ListPermissionsRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message ListPermissionsResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Permission list = 2;
}

  
message CreatePermissionRequest {
  auth.v1.Permission permission = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message CreatePermissionResponse {
  auth.v1.Permission permission = 1;
}

message UpdatePermissionRequest {
  auth.v1.Permission permission = 1;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message UpdatePermissionResponse {
  auth.v1.Permission permission = 1;
}

message DeletePermissionRequest {
  string id = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message DeletePermissionResponse {
}


  
message GetScopeRequest {
  string scope = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message GetScopeResponse {
  auth.v1.Scope scope = 1;
}

  
message ListScopesRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message ListScopesResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Scope list = 2;
}

  
message ListPermissionsByScopeRequest {
  string sorting = 1;
  auth.v1.PageParams paging = 2;
  string scope = 3;
  string tenant_scope = 4;
  string realm_scope = 5;
}

message ListPermissionsByScopeResponse {
  auth.v1.PageInfo page_info = 1;
  repeated auth.v1.Permission list = 2;
}
		
  
message AssociatePermissionsToScopeRequest {
  ScopePermissionAssociation permission = 1;
  string scope = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message AssociatePermissionsToScopeResponse {
}

message ScopePermissionAssociation {
  repeated string set = 1;
  repeated string remove = 2;
}

  
message CreateScopeRequest {
  auth.v1.Scope scope = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message CreateScopeResponse {
  auth.v1.Scope scope = 1;
}

message UpdateScopeRequest {
  auth.v1.Scope scope = 1;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message UpdateScopeResponse {
  auth.v1.Scope scope = 1;
}

message DeleteScopeRequest {
  string id = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message DeleteScopeResponse {
}



