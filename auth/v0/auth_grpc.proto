// GENERATED BY go:generate. DO NOT EDIT.

syntax = "proto3";
package auth.v0;

import "google/api/annotations.proto";
import "auth/v0/auth.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "AuthKit API";
		version: "0.1";
		contact: {
			name: "AuthKit Support";
			url: "https://support.authkit.com";
			email: "support@authkit.com";
		};
	};
	security_definitions: {
		security: {
			key: "OAuth2";
			value: {
				type: TYPE_OAUTH2;
				flow: FLOW_ACCESS_CODE;
				authorization_url: "{{ .IDPIssuer }}/authorize";
				token_url: "{{ .IDPIssuer }}/oauth/token";
				scopes: {
					scope: {
						key: "authkit.com/auth:all";
						value: "All API access";
					}
				}
			}
		}
	}
	security: {
		security_requirement: {
			key: "OAuth2";
			value: {
				scope: "authkit.com/auth:all";
			}
		}
	}
};

service AuthKitAuthService {
  
  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse) {
    option (google.api.http) = { get: "/v1/tenants" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetUser(GetUserRequest) returns (auth.v0.User) {
    option (google.api.http) = { get: "/v1/{tenantScope}/users/{user}" };
  }

  
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = { get: "/v1/{tenantScope}/users" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateUser(CreateUserRequest) returns (auth.v0.User) {
    option (google.api.http) = {
      post: "/v1/{tenantScope}/users"
      body: "user"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc UpdateUser(UpdateUserRequest) returns (auth.v0.User) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/users/{id}"
      body: "user"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{tenantScope}/users/{id}" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetUserDatabase(GetUserDatabaseRequest) returns (auth.v0.UserDatabase) {
    option (google.api.http) = { get: "/v1/{tenantScope}/user_databases/{user_database}" };
  }

  
  rpc ListUserDatabases(ListUserDatabasesRequest) returns (ListUserDatabasesResponse) {
    option (google.api.http) = { get: "/v1/{tenantScope}/user_databases" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateUserDatabase(CreateUserDatabaseRequest) returns (auth.v0.UserDatabase) {
    option (google.api.http) = {
      post: "/v1/{tenantScope}/user_databases"
      body: "user_database"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc UpdateUserDatabase(UpdateUserDatabaseRequest) returns (auth.v0.UserDatabase) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/user_databases/{id}"
      body: "user_database"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc DeleteUserDatabase(DeleteUserDatabaseRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{tenantScope}/user_databases/{id}" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc UpdateUserDatabaseConfig(UpdateUserDatabaseConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/user_databases/{id}/config"
      body: "config"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetProvider(GetProviderRequest) returns (auth.v0.Provider) {
    option (google.api.http) = { get: "/v1/{tenantScope}/providers/{provider}" };
  }

  
  rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse) {
    option (google.api.http) = { get: "/v1/{tenantScope}/providers" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateProvider(CreateProviderRequest) returns (auth.v0.Provider) {
    option (google.api.http) = {
      post: "/v1/{tenantScope}/providers"
      body: "provider"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc UpdateProvider(UpdateProviderRequest) returns (auth.v0.Provider) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/providers/{id}"
      body: "provider"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc DeleteProvider(DeleteProviderRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{tenantScope}/providers/{id}" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc UpdateProviderConfig(UpdateProviderConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/providers/{id}/config"
      body: "config"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetRealm(GetRealmRequest) returns (auth.v0.Realm) {
    option (google.api.http) = { get: "/v1/{tenantScope}/realms/{realm}" };
  }

  
  rpc ListRealms(ListRealmsRequest) returns (ListRealmsResponse) {
    option (google.api.http) = { get: "/v1/{tenantScope}/realms" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateRealm(CreateRealmRequest) returns (auth.v0.Realm) {
    option (google.api.http) = {
      post: "/v1/{tenantScope}/realms"
      body: "realm"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc UpdateRealm(UpdateRealmRequest) returns (auth.v0.Realm) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/realms/{id}"
      body: "realm"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc DeleteRealm(DeleteRealmRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{tenantScope}/realms/{id}" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetClient(GetClientRequest) returns (auth.v0.Client) {
    option (google.api.http) = { get: "/v1/{tenantScope}/{realmScope}/clients/{client}" };
  }

  
  rpc ListClients(ListClientsRequest) returns (ListClientsResponse) {
    option (google.api.http) = { get: "/v1/{tenantScope}/{realmScope}/clients" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc ListProvidersByClient (ListProvidersByClientRequest) returns (ListProvidersByClientResponse) {
    option (google.api.http) = {
	  get: "/v1/{tenantScope}/{realmScope}/clients/{client}/providers"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
		
  
  rpc AssociateProvidersToClient (AssociateProvidersToClientRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/{realmScope}/clients/{client}/providers"
      body: "provider"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc ListRolesByClient (ListRolesByClientRequest) returns (ListRolesByClientResponse) {
    option (google.api.http) = {
	  get: "/v1/{tenantScope}/{realmScope}/clients/{client}/roles"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
		
  
  rpc AssociateRolesToClient (AssociateRolesToClientRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/{realmScope}/clients/{client}/roles"
      body: "role"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateClient(CreateClientRequest) returns (auth.v0.Client) {
    option (google.api.http) = {
      post: "/v1/{tenantScope}/{realmScope}/clients"
      body: "client"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc UpdateClient(UpdateClientRequest) returns (auth.v0.Client) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/{realmScope}/clients/{id}"
      body: "client"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc DeleteClient(DeleteClientRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{tenantScope}/{realmScope}/clients/{id}" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc UpdateClientConfig(UpdateClientConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/{realmScope}/clients/{id}/config"
      body: "config"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetRole(GetRoleRequest) returns (auth.v0.Role) {
    option (google.api.http) = { get: "/v1/{tenantScope}/{realmScope}/roles/{role}" };
  }

  
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = { get: "/v1/{tenantScope}/{realmScope}/roles" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc ListPermissionsByRole (ListPermissionsByRoleRequest) returns (ListPermissionsByRoleResponse) {
    option (google.api.http) = {
	  get: "/v1/{tenantScope}/{realmScope}/roles/{role}/permissions"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
		
  
  rpc AssociatePermissionsToRole (AssociatePermissionsToRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/{realmScope}/roles/{role}/permissions"
      body: "permission"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateRole(CreateRoleRequest) returns (auth.v0.Role) {
    option (google.api.http) = {
      post: "/v1/{tenantScope}/{realmScope}/roles"
      body: "role"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc UpdateRole(UpdateRoleRequest) returns (auth.v0.Role) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/{realmScope}/roles/{id}"
      body: "role"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc DeleteRole(DeleteRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{tenantScope}/{realmScope}/roles/{id}" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetPermission(GetPermissionRequest) returns (auth.v0.Permission) {
    option (google.api.http) = { get: "/v1/{tenantScope}/{realmScope}/permissions/{permission}" };
  }

  
  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
    option (google.api.http) = { get: "/v1/{tenantScope}/{realmScope}/permissions" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreatePermission(CreatePermissionRequest) returns (auth.v0.Permission) {
    option (google.api.http) = {
      post: "/v1/{tenantScope}/{realmScope}/permissions"
      body: "permission"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc UpdatePermission(UpdatePermissionRequest) returns (auth.v0.Permission) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/{realmScope}/permissions/{id}"
      body: "permission"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc DeletePermission(DeletePermissionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{tenantScope}/{realmScope}/permissions/{id}" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc GetScope(GetScopeRequest) returns (auth.v0.Scope) {
    option (google.api.http) = { get: "/v1/{tenantScope}/{realmScope}/scopes/{scope}" };
  }

  
  rpc ListScopes(ListScopesRequest) returns (ListScopesResponse) {
    option (google.api.http) = { get: "/v1/{tenantScope}/{realmScope}/scopes" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc ListPermissionsByScope (ListPermissionsByScopeRequest) returns (ListPermissionsByScopeResponse) {
    option (google.api.http) = {
	  get: "/v1/{tenantScope}/{realmScope}/scopes/{scope}/permissions"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
		
  
  rpc AssociatePermissionsToScope (AssociatePermissionsToScopeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/{realmScope}/scopes/{scope}/permissions"
      body: "permission"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

  
  rpc CreateScope(CreateScopeRequest) returns (auth.v0.Scope) {
    option (google.api.http) = {
      post: "/v1/{tenantScope}/{realmScope}/scopes"
      body: "scope"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc UpdateScope(UpdateScopeRequest) returns (auth.v0.Scope) {
    option (google.api.http) = {
      put: "/v1/{tenantScope}/{realmScope}/scopes/{id}"
      body: "scope"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }
  rpc DeleteScope(DeleteScopeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{tenantScope}/{realmScope}/scopes/{id}" };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
	  security: {
	    security_requirement: {
		  key: "OAuth2";
		    value: {
		      scope: "authkit.com/auth:all";
			}
        }
	  }
	};
  }

}
  
message ListTenantsRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
}

message ListTenantsResponse {
  auth.v0.PageInfo page_info = 1;
  repeated auth.v0.Tenant list = 2;
}

  
message GetUserRequest {
  string user = 1;
  string tenantScope = 2;
}

  
message ListUsersRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string tenant_scope = 3;
}

message ListUsersResponse {
  auth.v0.PageInfo page_info = 1;
  repeated auth.v0.User list = 2;
}

  
message CreateUserRequest {
  auth.v0.User user = 1;
  string tenant_scope = 2;
}

message UpdateUserRequest {
  auth.v0.User user = 1;
  string id = 2;
  string tenant_scope = 3;
}

message DeleteUserRequest {
  string id = 1;
  string tenant_scope = 2;
}

  
message GetUserDatabaseRequest {
  string user_database = 1;
  string tenantScope = 2;
}

  
message ListUserDatabasesRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string tenant_scope = 3;
}

message ListUserDatabasesResponse {
  auth.v0.PageInfo page_info = 1;
  repeated auth.v0.UserDatabase list = 2;
}

  
message CreateUserDatabaseRequest {
  auth.v0.UserDatabase user_database = 1;
  string tenant_scope = 2;
}

message UpdateUserDatabaseRequest {
  auth.v0.UserDatabase user_database = 1;
  string id = 2;
  string tenant_scope = 3;
}

message DeleteUserDatabaseRequest {
  string id = 1;
  string tenant_scope = 2;
}

  
message UpdateUserDatabaseConfigRequest {
  UpdateUserDatabaseConfig config = 1;
  string id = 2;
  string tenant_scope = 3;
}

message UpdateUserDatabaseConfig {
  google.protobuf.Struct set = 1;
  repeated string remove = 2;
}

  
message GetProviderRequest {
  string provider = 1;
  string tenantScope = 2;
}

  
message ListProvidersRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string tenant_scope = 3;
}

message ListProvidersResponse {
  auth.v0.PageInfo page_info = 1;
  repeated auth.v0.Provider list = 2;
}

  
message CreateProviderRequest {
  auth.v0.Provider provider = 1;
  string tenant_scope = 2;
}

message UpdateProviderRequest {
  auth.v0.Provider provider = 1;
  string id = 2;
  string tenant_scope = 3;
}

message DeleteProviderRequest {
  string id = 1;
  string tenant_scope = 2;
}

  
message UpdateProviderConfigRequest {
  UpdateProviderConfig config = 1;
  string id = 2;
  string tenant_scope = 3;
}

message UpdateProviderConfig {
  google.protobuf.Struct set = 1;
  repeated string remove = 2;
}

  
message GetRealmRequest {
  string realm = 1;
  string tenantScope = 2;
}

  
message ListRealmsRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string tenant_scope = 3;
}

message ListRealmsResponse {
  auth.v0.PageInfo page_info = 1;
  repeated auth.v0.Realm list = 2;
}

  
message CreateRealmRequest {
  auth.v0.Realm realm = 1;
  string tenant_scope = 2;
}

message UpdateRealmRequest {
  auth.v0.Realm realm = 1;
  string id = 2;
  string tenant_scope = 3;
}

message DeleteRealmRequest {
  string id = 1;
  string tenant_scope = 2;
}

  
message GetClientRequest {
  string client = 1;
  string tenantScope = 2;
  string realmScope = 3;
}

  
message ListClientsRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message ListClientsResponse {
  auth.v0.PageInfo page_info = 1;
  repeated auth.v0.Client list = 2;
}

  
message ListProvidersByClientRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string client = 3;
  string tenantScope = 4;
  string realmScope = 5;
}
message ListProvidersByClientResponse {
  auth.v0.PageInfo pageInfo = 1;
  repeated auth.v0.Provider list = 2;
}
		
  
message AssociateProvidersToClientRequest {
  ClientProviderAssociation provider = 1;
  string client = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}
message ClientProviderAssociation {
  repeated string set = 1;
  repeated string remove = 2;
}

  
message ListRolesByClientRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string client = 3;
  string tenantScope = 4;
  string realmScope = 5;
}
message ListRolesByClientResponse {
  auth.v0.PageInfo pageInfo = 1;
  repeated auth.v0.Role list = 2;
}
		
  
message AssociateRolesToClientRequest {
  ClientRoleAssociation role = 1;
  string client = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}
message ClientRoleAssociation {
  repeated string set = 1;
  repeated string remove = 2;
}

  
message CreateClientRequest {
  auth.v0.Client client = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message UpdateClientRequest {
  auth.v0.Client client = 1;
  string id = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message DeleteClientRequest {
  string id = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

  
message UpdateClientConfigRequest {
  UpdateClientConfig config = 1;
  string id = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message UpdateClientConfig {
  google.protobuf.Struct set = 1;
  repeated string remove = 2;
}

  
message GetRoleRequest {
  string role = 1;
  string tenantScope = 2;
  string realmScope = 3;
}

  
message ListRolesRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message ListRolesResponse {
  auth.v0.PageInfo page_info = 1;
  repeated auth.v0.Role list = 2;
}

  
message ListPermissionsByRoleRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string role = 3;
  string tenantScope = 4;
  string realmScope = 5;
}
message ListPermissionsByRoleResponse {
  auth.v0.PageInfo pageInfo = 1;
  repeated auth.v0.Permission list = 2;
}
		
  
message AssociatePermissionsToRoleRequest {
  RolePermissionAssociation permission = 1;
  string role = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}
message RolePermissionAssociation {
  repeated string set = 1;
  repeated string remove = 2;
}

  
message CreateRoleRequest {
  auth.v0.Role role = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message UpdateRoleRequest {
  auth.v0.Role role = 1;
  string id = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message DeleteRoleRequest {
  string id = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

  
message GetPermissionRequest {
  string permission = 1;
  string tenantScope = 2;
  string realmScope = 3;
}

  
message ListPermissionsRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message ListPermissionsResponse {
  auth.v0.PageInfo page_info = 1;
  repeated auth.v0.Permission list = 2;
}

  
message CreatePermissionRequest {
  auth.v0.Permission permission = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message UpdatePermissionRequest {
  auth.v0.Permission permission = 1;
  string id = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message DeletePermissionRequest {
  string id = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

  
message GetScopeRequest {
  string scope = 1;
  string tenantScope = 2;
  string realmScope = 3;
}

  
message ListScopesRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message ListScopesResponse {
  auth.v0.PageInfo page_info = 1;
  repeated auth.v0.Scope list = 2;
}

  
message ListPermissionsByScopeRequest {
  string sorting = 1;
  auth.v0.PageParams paging = 2;
  string scope = 3;
  string tenantScope = 4;
  string realmScope = 5;
}
message ListPermissionsByScopeResponse {
  auth.v0.PageInfo pageInfo = 1;
  repeated auth.v0.Permission list = 2;
}
		
  
message AssociatePermissionsToScopeRequest {
  ScopePermissionAssociation permission = 1;
  string scope = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}
message ScopePermissionAssociation {
  repeated string set = 1;
  repeated string remove = 2;
}

  
message CreateScopeRequest {
  auth.v0.Scope scope = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}

message UpdateScopeRequest {
  auth.v0.Scope scope = 1;
  string id = 2;
  string tenant_scope = 3;
  string realm_scope = 4;
}

message DeleteScopeRequest {
  string id = 1;
  string tenant_scope = 2;
  string realm_scope = 3;
}


